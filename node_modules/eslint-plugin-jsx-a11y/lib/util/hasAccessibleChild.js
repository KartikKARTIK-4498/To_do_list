"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
<<<<<<< HEAD

=======
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = hasAccessibleChild;
<<<<<<< HEAD

var _jsxAstUtils = require("jsx-ast-utils");

var _isHiddenFromScreenReader = _interopRequireDefault(require("./isHiddenFromScreenReader"));

function hasAccessibleChild(node) {
  return node.children.some(function (child) {
    switch (child.type) {
      case 'Literal':
        return Boolean(child.value);
      // $FlowFixMe JSXText is missing in ast-types-flow

      case 'JSXText':
        return Boolean(child.value);

      case 'JSXElement':
        return !(0, _isHiddenFromScreenReader["default"])((0, _jsxAstUtils.elementType)(child.openingElement), child.openingElement.attributes);

=======
var _jsxAstUtils = require("jsx-ast-utils");
var _isHiddenFromScreenReader = _interopRequireDefault(require("./isHiddenFromScreenReader"));
function hasAccessibleChild(node, elementType) {
  return node.children.some(function (child) {
    switch (child.type) {
      case 'Literal':
        return !!child.value;
      // $FlowFixMe JSXText is missing in ast-types-flow
      case 'JSXText':
        return !!child.value;
      case 'JSXElement':
        return !(0, _isHiddenFromScreenReader["default"])(elementType(child.openingElement), child.openingElement.attributes);
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
      case 'JSXExpressionContainer':
        if (child.expression.type === 'Identifier') {
          return child.expression.name !== 'undefined';
        }
<<<<<<< HEAD

        return true;

=======
        return true;
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
      default:
        return false;
    }
  }) || (0, _jsxAstUtils.hasAnyProp)(node.openingElement.attributes, ['dangerouslySetInnerHTML', 'children']);
}
<<<<<<< HEAD

=======
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
module.exports = exports.default;