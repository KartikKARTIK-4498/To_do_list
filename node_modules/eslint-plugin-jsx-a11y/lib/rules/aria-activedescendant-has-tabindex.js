"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
<<<<<<< HEAD

=======
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
<<<<<<< HEAD

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _ariaQuery = require("aria-query");

var _jsxAstUtils = require("jsx-ast-utils");

var _schemas = require("../util/schemas");

var _getTabIndex = _interopRequireDefault(require("../util/getTabIndex"));

var _isInteractiveElement = _interopRequireDefault(require("../util/isInteractiveElement"));

=======
var _ariaQuery = require("aria-query");
var _jsxAstUtils = require("jsx-ast-utils");
var _schemas = require("../util/schemas");
var _getElementType = _interopRequireDefault(require("../util/getElementType"));
var _getTabIndex = _interopRequireDefault(require("../util/getTabIndex"));
var _isInteractiveElement = _interopRequireDefault(require("../util/isInteractiveElement"));
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
/**
 * @fileoverview Enforce elements with aria-activedescendant are tabbable.
 * @author Jesse Beach <@jessebeach>
 */
<<<<<<< HEAD
=======

>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------
var errorMessage = 'An element that manages focus with `aria-activedescendant` must have a tabindex';
var schema = (0, _schemas.generateObjSchema)();
<<<<<<< HEAD
var domElements = (0, _toConsumableArray2["default"])(_ariaQuery.dom.keys());
var _default = {
  meta: {
    docs: {
      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md'
=======
var _default = exports["default"] = {
  meta: {
    docs: {
      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md',
      description: 'Enforce elements with aria-activedescendant are tabbable.'
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
    },
    schema: [schema]
  },
  create: function create(context) {
<<<<<<< HEAD
    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        var attributes = node.attributes;

        if ((0, _jsxAstUtils.getProp)(attributes, 'aria-activedescendant') === undefined) {
          return;
        }

        var type = (0, _jsxAstUtils.elementType)(node); // Do not test higher level JSX components, as we do not know what
        // low-level DOM element this maps to.

        if (domElements.indexOf(type) === -1) {
          return;
        }

        var tabIndex = (0, _getTabIndex["default"])((0, _jsxAstUtils.getProp)(attributes, 'tabIndex')); // If this is an interactive element and the tabindex attribute is not specified,
        // or the tabIndex property was not mutated, then the tabIndex
        // property will be undefined.

        if ((0, _isInteractiveElement["default"])(type, attributes) && tabIndex === undefined) {
          return;
        }

        if (tabIndex >= -1) {
          return;
        }

=======
    var elementType = (0, _getElementType["default"])(context);
    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        var attributes = node.attributes;
        if ((0, _jsxAstUtils.getProp)(attributes, 'aria-activedescendant') === undefined) {
          return;
        }
        var type = elementType(node);
        // Do not test higher level JSX components, as we do not know what
        // low-level DOM element this maps to.
        if (!_ariaQuery.dom.has(type)) {
          return;
        }
        var tabIndex = (0, _getTabIndex["default"])((0, _jsxAstUtils.getProp)(attributes, 'tabIndex'));

        // If this is an interactive element and the tabindex attribute is not specified,
        // or the tabIndex property was not mutated, then the tabIndex
        // property will be undefined.
        if ((0, _isInteractiveElement["default"])(type, attributes) && tabIndex === undefined) {
          return;
        }
        if (tabIndex >= -1) {
          return;
        }
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
        context.report({
          node,
          message: errorMessage
        });
      }
    };
  }
};
<<<<<<< HEAD
exports["default"] = _default;
=======
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
module.exports = exports.default;