'use strict';
<<<<<<< HEAD
=======

>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
exports.__esModule = true;

const log = require('debug')('eslint-module-utils:ModuleCache');

<<<<<<< HEAD
class ModuleCache {
  constructor(map) {
    this.map = map || new Map();
  }

  /**
   * returns value for returning inline
   * @param {[type]} cacheKey [description]
   * @param {[type]} result   [description]
   */
=======
/** @type {import('./ModuleCache').ModuleCache} */
class ModuleCache {
  /** @param {typeof import('./ModuleCache').ModuleCache.prototype.map} map */
  constructor(map) {
    this.map = map || /** @type {{typeof import('./ModuleCache').ModuleCache.prototype.map} */ new Map();
  }

  /** @type {typeof import('./ModuleCache').ModuleCache.prototype.set} */
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
  set(cacheKey, result) {
    this.map.set(cacheKey, { result, lastSeen: process.hrtime() });
    log('setting entry for', cacheKey);
    return result;
  }

<<<<<<< HEAD
=======
  /** @type {typeof import('./ModuleCache').ModuleCache.prototype.get} */
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
  get(cacheKey, settings) {
    if (this.map.has(cacheKey)) {
      const f = this.map.get(cacheKey);
      // check freshness
<<<<<<< HEAD
      if (process.hrtime(f.lastSeen)[0] < settings.lifetime) return f.result;
    } else log('cache miss for', cacheKey);
=======
      // @ts-expect-error TS can't narrow properly from `has` and `get`
      if (process.hrtime(f.lastSeen)[0] < settings.lifetime) { return f.result; }
    } else {
      log('cache miss for', cacheKey);
    }
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
    // cache miss
    return undefined;
  }

<<<<<<< HEAD
}

ModuleCache.getSettings = function (settings) {
  const cacheSettings = Object.assign({
    lifetime: 30,  // seconds
  }, settings['import/cache']);

  // parse infinity
  if (cacheSettings.lifetime === '∞' || cacheSettings.lifetime === 'Infinity') {
    cacheSettings.lifetime = Infinity;
  }

  return cacheSettings;
};

=======
  /** @type {typeof import('./ModuleCache').ModuleCache.getSettings} */
  static getSettings(settings) {
    /** @type {ReturnType<typeof ModuleCache.getSettings>} */
    const cacheSettings = Object.assign({
      lifetime: 30,  // seconds
    }, settings['import/cache']);

    // parse infinity
    // @ts-expect-error the lack of type overlap is because we're abusing `cacheSettings` as a temporary object
    if (cacheSettings.lifetime === '∞' || cacheSettings.lifetime === 'Infinity') {
      cacheSettings.lifetime = Infinity;
    }

    return cacheSettings;
  }
}

>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
exports.default = ModuleCache;
