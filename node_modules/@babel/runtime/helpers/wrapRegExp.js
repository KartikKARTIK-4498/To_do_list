<<<<<<< HEAD
var _typeof = require("./typeof.js")["default"];
=======
var _typeof = require("@babel/runtime/helpers/typeof")["default"];
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5

var setPrototypeOf = require("./setPrototypeOf.js");

var inherits = require("./inherits.js");

function _wrapRegExp() {
  module.exports = _wrapRegExp = function _wrapRegExp(re, groups) {
<<<<<<< HEAD
    return new BabelRegExp(re, void 0, groups);
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;

  var _super = RegExp.prototype,
      _groups = new WeakMap();
=======
    return new BabelRegExp(re, undefined, groups);
  };

  module.exports["default"] = module.exports, module.exports.__esModule = true;
  var _super = RegExp.prototype;

  var _groups = new WeakMap();
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5

  function BabelRegExp(re, flags, groups) {
    var _this = new RegExp(re, flags);

<<<<<<< HEAD
    return _groups.set(_this, groups || _groups.get(re)), setPrototypeOf(_this, BabelRegExp.prototype);
  }

  function buildGroups(result, re) {
    var g = _groups.get(re);

    return Object.keys(g).reduce(function (groups, name) {
      return groups[name] = result[g[name]], groups;
    }, Object.create(null));
  }

  return inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) {
    var result = _super.exec.call(this, str);

    return result && (result.groups = buildGroups(result, this)), result;
  }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
    if ("string" == typeof substitution) {
=======
    _groups.set(_this, groups || _groups.get(re));

    return setPrototypeOf(_this, BabelRegExp.prototype);
  }

  inherits(BabelRegExp, RegExp);

  BabelRegExp.prototype.exec = function (str) {
    var result = _super.exec.call(this, str);

    if (result) result.groups = buildGroups(result, this);
    return result;
  };

  BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
    if (typeof substitution === "string") {
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
      var groups = _groups.get(this);

      return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
        return "$" + groups[name];
      }));
<<<<<<< HEAD
    }

    if ("function" == typeof substitution) {
=======
    } else if (typeof substitution === "function") {
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
      var _this = this;

      return _super[Symbol.replace].call(this, str, function () {
        var args = arguments;
<<<<<<< HEAD
        return "object" != _typeof(args[args.length - 1]) && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
      });
    }

    return _super[Symbol.replace].call(this, str, substitution);
  }, _wrapRegExp.apply(this, arguments);
}

module.exports = _wrapRegExp, module.exports.__esModule = true, module.exports["default"] = module.exports;
=======

        if (_typeof(args[args.length - 1]) !== "object") {
          args = [].slice.call(args);
          args.push(buildGroups(args, _this));
        }

        return substitution.apply(this, args);
      });
    } else {
      return _super[Symbol.replace].call(this, str, substitution);
    }
  };

  function buildGroups(result, re) {
    var g = _groups.get(re);

    return Object.keys(g).reduce(function (groups, name) {
      groups[name] = result[g[name]];
      return groups;
    }, Object.create(null));
  }

  return _wrapRegExp.apply(this, arguments);
}

module.exports = _wrapRegExp;
module.exports["default"] = module.exports, module.exports.__esModule = true;
>>>>>>> daf1795927da2d71e7fda32ee847e5794b9052d5
